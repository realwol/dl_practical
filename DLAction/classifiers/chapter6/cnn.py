#-*- coding: utf-8 -*-

import numpy as np
from cnn_layers import *

class ThreeLayerConvNet(object):
  """ 
  conv - relu - 2x2 max pool - affine - relu - affine - softmax
  
  """
  
  def __init__(self, input_dim=(3, 32, 32), num_filters=32, filter_size=7,
               hidden_dim=100, num_classes=10, weight_scale=1e-3, reg=0.0,):
    """
    初始化网络.
    
    Inputs:
    - input_dim: 输入数据形状 (C, H, W)
    - num_filters: 卷积核个数
    - filter_size: 卷积核尺寸
    - hidden_dim: 全连接层隐藏层个数
    - num_classes: 分类个数
    - weight_scale: 权重规模（标准差）
    - reg:权重衰减因子
    """
    self.params = {}
    self.reg = reg
    
    ############################################################################
    #              任务：初始化权重参数                                        #
    # 'W1'为卷积层参数，形状为(num_filters,C,filter_size,filter_size)          #
    # 'W2'为卷积层到全连接层参数，形状为((H/2)*(W/2)*num_filters, hidden_dim)  #
    #     'W3'隐藏层到全连接层参数                                             #
    ############################################################################

	
	
	
	
	
	
    ############################################################################
    #                            结束编码                                      #
    ############################################################################

     
 
  def loss(self, X, y=None):

    W1, b1 = self.params['W1'], self.params['b1']
    W2, b2 = self.params['W2'], self.params['b2']
    W3, b3 = self.params['W3'], self.params['b3']
    

    filter_size = W1.shape[2]
    conv_param = {'stride': 1, 'pad': (filter_size - 1) / 2}


    pool_param = {'pool_height': 2, 'pool_width': 2, 'stride': 2}

    scores = None
    ############################################################################
    #               任务：   实现前向传播                                      #
    #          计算每类得分，将其存放在scores中                                #
    ############################################################################

	
	
	
	
	
    ############################################################################
    #                             结束编码                                     #
    ############################################################################
    
    if y is None:
      return scores
    
    loss, grads = 0, {}
    ############################################################################
    #                     任务：实现反向转播                                   #
    #                    注意：别忘了权重衰减项                                #
    ############################################################################

	
	
	
	
	
    ############################################################################
    #                             结束编码                                     #
    ############################################################################
    
    return loss, grads
  
  

